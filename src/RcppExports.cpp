// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// two_grp_fixed_a0
arma::vec two_grp_fixed_a0(std::string dType, double& y_c, double& n_c, arma::mat& historical, double b_01, double b_02);
RcppExport SEXP _BayesPPD_two_grp_fixed_a0(SEXP dTypeSEXP, SEXP y_cSEXP, SEXP n_cSEXP, SEXP historicalSEXP, SEXP b_01SEXP, SEXP b_02SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dType(dTypeSEXP);
    Rcpp::traits::input_parameter< double& >::type y_c(y_cSEXP);
    Rcpp::traits::input_parameter< double& >::type n_c(n_cSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type historical(historicalSEXP);
    Rcpp::traits::input_parameter< double >::type b_01(b_01SEXP);
    Rcpp::traits::input_parameter< double >::type b_02(b_02SEXP);
    rcpp_result_gen = Rcpp::wrap(two_grp_fixed_a0(dType, y_c, n_c, historical, b_01, b_02));
    return rcpp_result_gen;
END_RCPP
}
// power_two_grp_fixed_a0
Rcpp::List power_two_grp_fixed_a0(std::string dType, double n_t, double n_c, arma::mat historical, NumericVector p_t_prior_samps, NumericVector p_c_prior_samps, double b_t1, double b_t2, double b_01, double b_02, double delta, double gamma, int N, double upper_inf);
RcppExport SEXP _BayesPPD_power_two_grp_fixed_a0(SEXP dTypeSEXP, SEXP n_tSEXP, SEXP n_cSEXP, SEXP historicalSEXP, SEXP p_t_prior_sampsSEXP, SEXP p_c_prior_sampsSEXP, SEXP b_t1SEXP, SEXP b_t2SEXP, SEXP b_01SEXP, SEXP b_02SEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP NSEXP, SEXP upper_infSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dType(dTypeSEXP);
    Rcpp::traits::input_parameter< double >::type n_t(n_tSEXP);
    Rcpp::traits::input_parameter< double >::type n_c(n_cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type historical(historicalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p_t_prior_samps(p_t_prior_sampsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p_c_prior_samps(p_c_prior_sampsSEXP);
    Rcpp::traits::input_parameter< double >::type b_t1(b_t1SEXP);
    Rcpp::traits::input_parameter< double >::type b_t2(b_t2SEXP);
    Rcpp::traits::input_parameter< double >::type b_01(b_01SEXP);
    Rcpp::traits::input_parameter< double >::type b_02(b_02SEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type upper_inf(upper_infSEXP);
    rcpp_result_gen = Rcpp::wrap(power_two_grp_fixed_a0(dType, n_t, n_c, historical, p_t_prior_samps, p_c_prior_samps, b_t1, b_t2, b_01, b_02, delta, gamma, N, upper_inf));
    return rcpp_result_gen;
END_RCPP
}
// two_grp_fixed_a0_normal
Rcpp::List two_grp_fixed_a0_normal(double& y_c, double& n_c, double& v, arma::mat& historical, int& nMC, int& nBI);
RcppExport SEXP _BayesPPD_two_grp_fixed_a0_normal(SEXP y_cSEXP, SEXP n_cSEXP, SEXP vSEXP, SEXP historicalSEXP, SEXP nMCSEXP, SEXP nBISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type y_c(y_cSEXP);
    Rcpp::traits::input_parameter< double& >::type n_c(n_cSEXP);
    Rcpp::traits::input_parameter< double& >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type historical(historicalSEXP);
    Rcpp::traits::input_parameter< int& >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int& >::type nBI(nBISEXP);
    rcpp_result_gen = Rcpp::wrap(two_grp_fixed_a0_normal(y_c, n_c, v, historical, nMC, nBI));
    return rcpp_result_gen;
END_RCPP
}
// power_two_grp_fixed_a0_normal
Rcpp::List power_two_grp_fixed_a0_normal(double n_t, double n_c, arma::mat historical, NumericVector mu_t_prior_samps, NumericVector mu_c_prior_samps, NumericVector var_t_prior_samps, NumericVector var_c_prior_samps, double delta, double gamma, int nMC, int nBI, int N);
RcppExport SEXP _BayesPPD_power_two_grp_fixed_a0_normal(SEXP n_tSEXP, SEXP n_cSEXP, SEXP historicalSEXP, SEXP mu_t_prior_sampsSEXP, SEXP mu_c_prior_sampsSEXP, SEXP var_t_prior_sampsSEXP, SEXP var_c_prior_sampsSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP nMCSEXP, SEXP nBISEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n_t(n_tSEXP);
    Rcpp::traits::input_parameter< double >::type n_c(n_cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type historical(historicalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_t_prior_samps(mu_t_prior_sampsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_c_prior_samps(mu_c_prior_sampsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_t_prior_samps(var_t_prior_sampsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_c_prior_samps(var_c_prior_sampsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int >::type nBI(nBISEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(power_two_grp_fixed_a0_normal(n_t, n_c, historical, mu_t_prior_samps, mu_c_prior_samps, var_t_prior_samps, var_c_prior_samps, delta, gamma, nMC, nBI, N));
    return rcpp_result_gen;
END_RCPP
}
// glm_fixed_a0
arma::mat glm_fixed_a0(std::string& dType0, std::string& dLink0, arma::vec& y0, arma::vec& n0, arma::mat& x0, Rcpp::List& historical0, arma::vec& init_var0, arma::vec& lower_limits0, arma::vec& upper_limits0, arma::vec& slice_widths0, int nMC, int nBI, bool& dCurrent0);
RcppExport SEXP _BayesPPD_glm_fixed_a0(SEXP dType0SEXP, SEXP dLink0SEXP, SEXP y0SEXP, SEXP n0SEXP, SEXP x0SEXP, SEXP historical0SEXP, SEXP init_var0SEXP, SEXP lower_limits0SEXP, SEXP upper_limits0SEXP, SEXP slice_widths0SEXP, SEXP nMCSEXP, SEXP nBISEXP, SEXP dCurrent0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type dType0(dType0SEXP);
    Rcpp::traits::input_parameter< std::string& >::type dLink0(dLink0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type historical0(historical0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_var0(init_var0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lower_limits0(lower_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type upper_limits0(upper_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type slice_widths0(slice_widths0SEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int >::type nBI(nBISEXP);
    Rcpp::traits::input_parameter< bool& >::type dCurrent0(dCurrent0SEXP);
    rcpp_result_gen = Rcpp::wrap(glm_fixed_a0(dType0, dLink0, y0, n0, x0, historical0, init_var0, lower_limits0, upper_limits0, slice_widths0, nMC, nBI, dCurrent0));
    return rcpp_result_gen;
END_RCPP
}
// glm_fixed_a0_normal
Rcpp::List glm_fixed_a0_normal(arma::vec& y, arma::mat& x, Rcpp::List& historical, int& nMC, int& nBI);
RcppExport SEXP _BayesPPD_glm_fixed_a0_normal(SEXP ySEXP, SEXP xSEXP, SEXP historicalSEXP, SEXP nMCSEXP, SEXP nBISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type historical(historicalSEXP);
    Rcpp::traits::input_parameter< int& >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int& >::type nBI(nBISEXP);
    rcpp_result_gen = Rcpp::wrap(glm_fixed_a0_normal(y, x, historical, nMC, nBI));
    return rcpp_result_gen;
END_RCPP
}
// power_glm_fixed_a0
Rcpp::List power_glm_fixed_a0(std::string& dType0, std::string& dLink0, double& n_total, arma::vec& n0, Rcpp::List& historical0, arma::mat& x_samps, arma::mat& beta_c_prior_samps, arma::vec& var_prior_samps, arma::vec& lower_limits0, arma::vec& upper_limits0, arma::vec& slice_widths0, double& delta, double& gamma, int nMC, int nBI, int N, bool& dCurrent0);
RcppExport SEXP _BayesPPD_power_glm_fixed_a0(SEXP dType0SEXP, SEXP dLink0SEXP, SEXP n_totalSEXP, SEXP n0SEXP, SEXP historical0SEXP, SEXP x_sampsSEXP, SEXP beta_c_prior_sampsSEXP, SEXP var_prior_sampsSEXP, SEXP lower_limits0SEXP, SEXP upper_limits0SEXP, SEXP slice_widths0SEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP nMCSEXP, SEXP nBISEXP, SEXP NSEXP, SEXP dCurrent0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type dType0(dType0SEXP);
    Rcpp::traits::input_parameter< std::string& >::type dLink0(dLink0SEXP);
    Rcpp::traits::input_parameter< double& >::type n_total(n_totalSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type historical0(historical0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_samps(x_sampsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_c_prior_samps(beta_c_prior_sampsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type var_prior_samps(var_prior_sampsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lower_limits0(lower_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type upper_limits0(upper_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type slice_widths0(slice_widths0SEXP);
    Rcpp::traits::input_parameter< double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int >::type nBI(nBISEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool& >::type dCurrent0(dCurrent0SEXP);
    rcpp_result_gen = Rcpp::wrap(power_glm_fixed_a0(dType0, dLink0, n_total, n0, historical0, x_samps, beta_c_prior_samps, var_prior_samps, lower_limits0, upper_limits0, slice_widths0, delta, gamma, nMC, nBI, N, dCurrent0));
    return rcpp_result_gen;
END_RCPP
}
// power_glm_fixed_a0_approx
double power_glm_fixed_a0_approx(std::string& dType0, double& n_total, Rcpp::List& historical0, arma::mat& x_samps, arma::mat& beta_c_prior_samps, arma::vec& var_prior_samps, double& delta, double& gamma, int nNR, double tol, int N);
RcppExport SEXP _BayesPPD_power_glm_fixed_a0_approx(SEXP dType0SEXP, SEXP n_totalSEXP, SEXP historical0SEXP, SEXP x_sampsSEXP, SEXP beta_c_prior_sampsSEXP, SEXP var_prior_sampsSEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP nNRSEXP, SEXP tolSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type dType0(dType0SEXP);
    Rcpp::traits::input_parameter< double& >::type n_total(n_totalSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type historical0(historical0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_samps(x_sampsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_c_prior_samps(beta_c_prior_sampsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type var_prior_samps(var_prior_sampsSEXP);
    Rcpp::traits::input_parameter< double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type nNR(nNRSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(power_glm_fixed_a0_approx(dType0, n_total, historical0, x_samps, beta_c_prior_samps, var_prior_samps, delta, gamma, nNR, tol, N));
    return rcpp_result_gen;
END_RCPP
}
// two_grp_random_a0
Rcpp::List two_grp_random_a0(std::string& dType0, double& y0, double& n0, arma::mat& historical0, double& b_010, double& b_020, arma::vec& c_10, arma::vec& c_20, arma::vec& lower_limits0, arma::vec& upper_limits0, arma::vec& slice_widths0, int nMC, int nBI);
RcppExport SEXP _BayesPPD_two_grp_random_a0(SEXP dType0SEXP, SEXP y0SEXP, SEXP n0SEXP, SEXP historical0SEXP, SEXP b_010SEXP, SEXP b_020SEXP, SEXP c_10SEXP, SEXP c_20SEXP, SEXP lower_limits0SEXP, SEXP upper_limits0SEXP, SEXP slice_widths0SEXP, SEXP nMCSEXP, SEXP nBISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type dType0(dType0SEXP);
    Rcpp::traits::input_parameter< double& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< double& >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type historical0(historical0SEXP);
    Rcpp::traits::input_parameter< double& >::type b_010(b_010SEXP);
    Rcpp::traits::input_parameter< double& >::type b_020(b_020SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_10(c_10SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_20(c_20SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lower_limits0(lower_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type upper_limits0(upper_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type slice_widths0(slice_widths0SEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int >::type nBI(nBISEXP);
    rcpp_result_gen = Rcpp::wrap(two_grp_random_a0(dType0, y0, n0, historical0, b_010, b_020, c_10, c_20, lower_limits0, upper_limits0, slice_widths0, nMC, nBI));
    return rcpp_result_gen;
END_RCPP
}
// two_grp_random_a0_normal
Rcpp::List two_grp_random_a0_normal(double y0, double n0, double v0, arma::mat historical0, arma::vec& c_10, arma::vec& c_20, arma::vec& lower_limits0, arma::vec& upper_limits0, arma::vec& slice_widths0, int nMC, int nBI);
RcppExport SEXP _BayesPPD_two_grp_random_a0_normal(SEXP y0SEXP, SEXP n0SEXP, SEXP v0SEXP, SEXP historical0SEXP, SEXP c_10SEXP, SEXP c_20SEXP, SEXP lower_limits0SEXP, SEXP upper_limits0SEXP, SEXP slice_widths0SEXP, SEXP nMCSEXP, SEXP nBISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< double >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type historical0(historical0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_10(c_10SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_20(c_20SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lower_limits0(lower_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type upper_limits0(upper_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type slice_widths0(slice_widths0SEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int >::type nBI(nBISEXP);
    rcpp_result_gen = Rcpp::wrap(two_grp_random_a0_normal(y0, n0, v0, historical0, c_10, c_20, lower_limits0, upper_limits0, slice_widths0, nMC, nBI));
    return rcpp_result_gen;
END_RCPP
}
// glm_random_a0_normal
Rcpp::List glm_random_a0_normal(arma::vec y_normal0, arma::mat x_normal0, Rcpp::List historical_normal0, arma::vec& c_10, arma::vec& c_20, arma::vec& lower_limits0, arma::vec& upper_limits0, arma::vec& slice_widths0, int nMC, int nBI);
RcppExport SEXP _BayesPPD_glm_random_a0_normal(SEXP y_normal0SEXP, SEXP x_normal0SEXP, SEXP historical_normal0SEXP, SEXP c_10SEXP, SEXP c_20SEXP, SEXP lower_limits0SEXP, SEXP upper_limits0SEXP, SEXP slice_widths0SEXP, SEXP nMCSEXP, SEXP nBISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y_normal0(y_normal0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_normal0(x_normal0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type historical_normal0(historical_normal0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_10(c_10SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_20(c_20SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lower_limits0(lower_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type upper_limits0(upper_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type slice_widths0(slice_widths0SEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int >::type nBI(nBISEXP);
    rcpp_result_gen = Rcpp::wrap(glm_random_a0_normal(y_normal0, x_normal0, historical_normal0, c_10, c_20, lower_limits0, upper_limits0, slice_widths0, nMC, nBI));
    return rcpp_result_gen;
END_RCPP
}
// power_two_grp_random_a0
Rcpp::List power_two_grp_random_a0(std::string& dType0, double& n_t, double& n0, arma::mat& historical0, arma::vec& mu_t_prior_samps, arma::vec& mu_c_prior_samps, arma::vec& var_t_prior_samps, arma::vec& var_c_prior_samps, double& b_t1, double& b_t2, double& b_010, double& b_020, arma::vec& c_10, arma::vec& c_20, arma::vec& lower_limits0, arma::vec& upper_limits0, arma::vec& slice_widths0, double& delta, double& gamma, int& nMC, int& nBI, int& N);
RcppExport SEXP _BayesPPD_power_two_grp_random_a0(SEXP dType0SEXP, SEXP n_tSEXP, SEXP n0SEXP, SEXP historical0SEXP, SEXP mu_t_prior_sampsSEXP, SEXP mu_c_prior_sampsSEXP, SEXP var_t_prior_sampsSEXP, SEXP var_c_prior_sampsSEXP, SEXP b_t1SEXP, SEXP b_t2SEXP, SEXP b_010SEXP, SEXP b_020SEXP, SEXP c_10SEXP, SEXP c_20SEXP, SEXP lower_limits0SEXP, SEXP upper_limits0SEXP, SEXP slice_widths0SEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP nMCSEXP, SEXP nBISEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type dType0(dType0SEXP);
    Rcpp::traits::input_parameter< double& >::type n_t(n_tSEXP);
    Rcpp::traits::input_parameter< double& >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type historical0(historical0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu_t_prior_samps(mu_t_prior_sampsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu_c_prior_samps(mu_c_prior_sampsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type var_t_prior_samps(var_t_prior_sampsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type var_c_prior_samps(var_c_prior_sampsSEXP);
    Rcpp::traits::input_parameter< double& >::type b_t1(b_t1SEXP);
    Rcpp::traits::input_parameter< double& >::type b_t2(b_t2SEXP);
    Rcpp::traits::input_parameter< double& >::type b_010(b_010SEXP);
    Rcpp::traits::input_parameter< double& >::type b_020(b_020SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_10(c_10SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_20(c_20SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lower_limits0(lower_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type upper_limits0(upper_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type slice_widths0(slice_widths0SEXP);
    Rcpp::traits::input_parameter< double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int& >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int& >::type nBI(nBISEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(power_two_grp_random_a0(dType0, n_t, n0, historical0, mu_t_prior_samps, mu_c_prior_samps, var_t_prior_samps, var_c_prior_samps, b_t1, b_t2, b_010, b_020, c_10, c_20, lower_limits0, upper_limits0, slice_widths0, delta, gamma, nMC, nBI, N));
    return rcpp_result_gen;
END_RCPP
}
// power_glm_random_a0_normal
Rcpp::List power_glm_random_a0_normal(double& n_total, Rcpp::List& historical0, arma::mat& beta_c_prior_samps, arma::vec& var_prior_samps, arma::vec& c_10, arma::vec& c_20, arma::vec& lower_limits0, arma::vec& upper_limits0, arma::vec& slice_widths0, double& delta, double& gamma, int nMC, int nBI, int N);
RcppExport SEXP _BayesPPD_power_glm_random_a0_normal(SEXP n_totalSEXP, SEXP historical0SEXP, SEXP beta_c_prior_sampsSEXP, SEXP var_prior_sampsSEXP, SEXP c_10SEXP, SEXP c_20SEXP, SEXP lower_limits0SEXP, SEXP upper_limits0SEXP, SEXP slice_widths0SEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP nMCSEXP, SEXP nBISEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type n_total(n_totalSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type historical0(historical0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_c_prior_samps(beta_c_prior_sampsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type var_prior_samps(var_prior_sampsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_10(c_10SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_20(c_20SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lower_limits0(lower_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type upper_limits0(upper_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type slice_widths0(slice_widths0SEXP);
    Rcpp::traits::input_parameter< double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int >::type nBI(nBISEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(power_glm_random_a0_normal(n_total, historical0, beta_c_prior_samps, var_prior_samps, c_10, c_20, lower_limits0, upper_limits0, slice_widths0, delta, gamma, nMC, nBI, N));
    return rcpp_result_gen;
END_RCPP
}
// glm_random_a0
Rcpp::List glm_random_a0(std::string& dType0, std::string& dLink0, arma::vec& y0, arma::vec& n0, arma::mat& x0, Rcpp::List& historical0, arma::vec& init_var0, arma::vec& c_10, arma::vec& c_20, arma::vec& coef0, arma::vec& lower_limits0, arma::vec& upper_limits0, arma::vec& slice_widths0, int nMC, int nBI);
RcppExport SEXP _BayesPPD_glm_random_a0(SEXP dType0SEXP, SEXP dLink0SEXP, SEXP y0SEXP, SEXP n0SEXP, SEXP x0SEXP, SEXP historical0SEXP, SEXP init_var0SEXP, SEXP c_10SEXP, SEXP c_20SEXP, SEXP coef0SEXP, SEXP lower_limits0SEXP, SEXP upper_limits0SEXP, SEXP slice_widths0SEXP, SEXP nMCSEXP, SEXP nBISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type dType0(dType0SEXP);
    Rcpp::traits::input_parameter< std::string& >::type dLink0(dLink0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type historical0(historical0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_var0(init_var0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_10(c_10SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_20(c_20SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type coef0(coef0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lower_limits0(lower_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type upper_limits0(upper_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type slice_widths0(slice_widths0SEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int >::type nBI(nBISEXP);
    rcpp_result_gen = Rcpp::wrap(glm_random_a0(dType0, dLink0, y0, n0, x0, historical0, init_var0, c_10, c_20, coef0, lower_limits0, upper_limits0, slice_widths0, nMC, nBI));
    return rcpp_result_gen;
END_RCPP
}
// power_glm_random_a0
Rcpp::List power_glm_random_a0(std::string& dType0, std::string& dLink0, double& n_total, arma::vec& n0, Rcpp::List& historical0, arma::mat& beta_c_prior_samps, arma::vec& init_var0, arma::vec& c_10, arma::vec& c_20, arma::vec& coef0, arma::vec& lower_limits0, arma::vec& upper_limits0, arma::vec& slice_widths0, double& delta, double& gamma, int nMC, int nBI, int N);
RcppExport SEXP _BayesPPD_power_glm_random_a0(SEXP dType0SEXP, SEXP dLink0SEXP, SEXP n_totalSEXP, SEXP n0SEXP, SEXP historical0SEXP, SEXP beta_c_prior_sampsSEXP, SEXP init_var0SEXP, SEXP c_10SEXP, SEXP c_20SEXP, SEXP coef0SEXP, SEXP lower_limits0SEXP, SEXP upper_limits0SEXP, SEXP slice_widths0SEXP, SEXP deltaSEXP, SEXP gammaSEXP, SEXP nMCSEXP, SEXP nBISEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type dType0(dType0SEXP);
    Rcpp::traits::input_parameter< std::string& >::type dLink0(dLink0SEXP);
    Rcpp::traits::input_parameter< double& >::type n_total(n_totalSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type historical0(historical0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_c_prior_samps(beta_c_prior_sampsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_var0(init_var0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_10(c_10SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type c_20(c_20SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type coef0(coef0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lower_limits0(lower_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type upper_limits0(upper_limits0SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type slice_widths0(slice_widths0SEXP);
    Rcpp::traits::input_parameter< double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type nMC(nMCSEXP);
    Rcpp::traits::input_parameter< int >::type nBI(nBISEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(power_glm_random_a0(dType0, dLink0, n_total, n0, historical0, beta_c_prior_samps, init_var0, c_10, c_20, coef0, lower_limits0, upper_limits0, slice_widths0, delta, gamma, nMC, nBI, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesPPD_two_grp_fixed_a0", (DL_FUNC) &_BayesPPD_two_grp_fixed_a0, 6},
    {"_BayesPPD_power_two_grp_fixed_a0", (DL_FUNC) &_BayesPPD_power_two_grp_fixed_a0, 14},
    {"_BayesPPD_two_grp_fixed_a0_normal", (DL_FUNC) &_BayesPPD_two_grp_fixed_a0_normal, 6},
    {"_BayesPPD_power_two_grp_fixed_a0_normal", (DL_FUNC) &_BayesPPD_power_two_grp_fixed_a0_normal, 12},
    {"_BayesPPD_glm_fixed_a0", (DL_FUNC) &_BayesPPD_glm_fixed_a0, 13},
    {"_BayesPPD_glm_fixed_a0_normal", (DL_FUNC) &_BayesPPD_glm_fixed_a0_normal, 5},
    {"_BayesPPD_power_glm_fixed_a0", (DL_FUNC) &_BayesPPD_power_glm_fixed_a0, 17},
    {"_BayesPPD_power_glm_fixed_a0_approx", (DL_FUNC) &_BayesPPD_power_glm_fixed_a0_approx, 11},
    {"_BayesPPD_two_grp_random_a0", (DL_FUNC) &_BayesPPD_two_grp_random_a0, 13},
    {"_BayesPPD_two_grp_random_a0_normal", (DL_FUNC) &_BayesPPD_two_grp_random_a0_normal, 11},
    {"_BayesPPD_glm_random_a0_normal", (DL_FUNC) &_BayesPPD_glm_random_a0_normal, 10},
    {"_BayesPPD_power_two_grp_random_a0", (DL_FUNC) &_BayesPPD_power_two_grp_random_a0, 22},
    {"_BayesPPD_power_glm_random_a0_normal", (DL_FUNC) &_BayesPPD_power_glm_random_a0_normal, 14},
    {"_BayesPPD_glm_random_a0", (DL_FUNC) &_BayesPPD_glm_random_a0, 15},
    {"_BayesPPD_power_glm_random_a0", (DL_FUNC) &_BayesPPD_power_glm_random_a0, 18},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesPPD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
